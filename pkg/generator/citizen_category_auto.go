// Code generated by "enumer -type=CitizenCategory -output=citizen_category_auto.go -trimprefix=Category -transform=snake"; DO NOT EDIT.

package generator

import (
	"fmt"
)

const _CitizenCategoryName = "below_averageaverageabove_averageexceptional"

var _CitizenCategoryIndex = [...]uint8{0, 13, 20, 33, 44}

func (i CitizenCategory) String() string {
	if i < 0 || i >= CitizenCategory(len(_CitizenCategoryIndex)-1) {
		return fmt.Sprintf("CitizenCategory(%d)", i)
	}
	return _CitizenCategoryName[_CitizenCategoryIndex[i]:_CitizenCategoryIndex[i+1]]
}

var _CitizenCategoryValues = []CitizenCategory{0, 1, 2, 3}

var _CitizenCategoryNameToValueMap = map[string]CitizenCategory{
	_CitizenCategoryName[0:13]:  0,
	_CitizenCategoryName[13:20]: 1,
	_CitizenCategoryName[20:33]: 2,
	_CitizenCategoryName[33:44]: 3,
}

// CitizenCategoryString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CitizenCategoryString(s string) (CitizenCategory, error) {
	if val, ok := _CitizenCategoryNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CitizenCategory values", s)
}

// CitizenCategoryValues returns all values of the enum
func CitizenCategoryValues() []CitizenCategory {
	return _CitizenCategoryValues
}

// IsACitizenCategory returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CitizenCategory) IsACitizenCategory() bool {
	for _, v := range _CitizenCategoryValues {
		if i == v {
			return true
		}
	}
	return false
}
