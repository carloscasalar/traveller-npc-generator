// Code generated by "enumer -type=Experience -output=experience_auto.go -trimprefix=Experience -transform=snake"; DO NOT EDIT.

package generator

import (
	"fmt"
)

const _ExperienceName = "recruitrookieintermediateregularveteranelite"

var _ExperienceIndex = [...]uint8{0, 7, 13, 25, 32, 39, 44}

func (i Experience) String() string {
	if i < 0 || i >= Experience(len(_ExperienceIndex)-1) {
		return fmt.Sprintf("Experience(%d)", i)
	}
	return _ExperienceName[_ExperienceIndex[i]:_ExperienceIndex[i+1]]
}

var _ExperienceValues = []Experience{0, 1, 2, 3, 4, 5}

var _ExperienceNameToValueMap = map[string]Experience{
	_ExperienceName[0:7]:   0,
	_ExperienceName[7:13]:  1,
	_ExperienceName[13:25]: 2,
	_ExperienceName[25:32]: 3,
	_ExperienceName[32:39]: 4,
	_ExperienceName[39:44]: 5,
}

// ExperienceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExperienceString(s string) (Experience, error) {
	if val, ok := _ExperienceNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Experience values", s)
}

// ExperienceValues returns all values of the enum
func ExperienceValues() []Experience {
	return _ExperienceValues
}

// IsAExperience returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Experience) IsAExperience() bool {
	for _, v := range _ExperienceValues {
		if i == v {
			return true
		}
	}
	return false
}
