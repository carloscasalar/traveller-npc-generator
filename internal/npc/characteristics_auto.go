// Code generated by "enumer -type=Characteristic -output=characteristics_auto.go"; DO NOT EDIT.

package npc

import (
	"fmt"
)

const _CharacteristicName = "STRDEXENDINTEDUSOC"

var _CharacteristicIndex = [...]uint8{0, 3, 6, 9, 12, 15, 18}

func (i Characteristic) String() string {
	if i < 0 || i >= Characteristic(len(_CharacteristicIndex)-1) {
		return fmt.Sprintf("Characteristic(%d)", i)
	}
	return _CharacteristicName[_CharacteristicIndex[i]:_CharacteristicIndex[i+1]]
}

var _CharacteristicValues = []Characteristic{0, 1, 2, 3, 4, 5}

var _CharacteristicNameToValueMap = map[string]Characteristic{
	_CharacteristicName[0:3]:   0,
	_CharacteristicName[3:6]:   1,
	_CharacteristicName[6:9]:   2,
	_CharacteristicName[9:12]:  3,
	_CharacteristicName[12:15]: 4,
	_CharacteristicName[15:18]: 5,
}

// CharacteristicString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CharacteristicString(s string) (Characteristic, error) {
	if val, ok := _CharacteristicNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Characteristic values", s)
}

// CharacteristicValues returns all values of the enum
func CharacteristicValues() []Characteristic {
	return _CharacteristicValues
}

// IsACharacteristic returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Characteristic) IsACharacteristic() bool {
	for _, v := range _CharacteristicValues {
		if i == v {
			return true
		}
	}
	return false
}
